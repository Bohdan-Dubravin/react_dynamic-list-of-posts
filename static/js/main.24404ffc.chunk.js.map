{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/api.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectPostId","currentPostId","className","map","post","userId","title","type","onClick","id","validationEmail","NewCommentForm","postComment","formBlank","name","email","body","useState","newComment","setNewComment","isError","setIsError","handleChange","e","currentTarget","value","prev","onSubmit","preventDefault","Object","values","some","field","trim","match","placeholder","onChange","PostDetails","selectedPost","postComments","deleteComment","isShow","setIsShow","length","comment","BASE_URL","getAllPosts","a","fetch","response","json","data","getUserPosts","Error","getPostDetails","postId","getPostComments","removeComment","commentId","method","postNewComment","preparedData","headers","JSON","stringify","App","setPosts","error","setErorr","selectedPostId","setSelectedPostId","setSelectedPost","setPostComments","result","target","fetchPostComments","PostId","useEffect","fetchPostList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24404ffc.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[] | null;\n  selectPostId: (postid: number) => void;\n  currentPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectPostId,\n  currentPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul data-cy=\"postDetails\" className=\"PostsList__list\">\n        {posts && posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`User #${post.userId}: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => selectPostId(post.id)}\n            >\n              {currentPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { NewPostBody } from '../../types/Post';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postComment: (preparedData: NewPostBody) => void;\n};\n// eslint-disable-next-line\nconst validationEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\nexport const NewCommentForm: React.FC<Props> = ({ postComment }) => {\n  const formBlank = {\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [newComment, setNewComment] = useState(formBlank);\n  const [isError, setIsError] = useState('');\n\n  function handleChange(e:\n  React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) {\n    const { name, value } = e.currentTarget;\n\n    setNewComment(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n\n    setIsError('');\n  }\n\n  function handleSubmit(e: React.SyntheticEvent) {\n    e.preventDefault();\n\n    const isFilled = Object.values(newComment);\n\n    if (isFilled.some(field => field.trim() === '')) {\n      setIsError('Fill in all fields');\n\n      return;\n    }\n\n    if (!newComment.email.match(validationEmail)) {\n      setIsError('Enter valid Email adress');\n\n      return;\n    }\n\n    postComment(newComment);\n\n    setNewComment(formBlank);\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"NewCommentForm\">\n      <p>{isError}</p>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newComment.body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { ComentsPost, DetailsPost, NewPostBody } from '../../types/Post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPost: DetailsPost;\n  postComments: ComentsPost[] | null;\n  deleteComment: (postId: number) => void;\n  postComment: (preparedData: NewPostBody) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  postComments,\n  deleteComment,\n  postComment,\n}) => {\n  const [isShow, setIsShow] = useState(true);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.body}</p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        {postComments && postComments?.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsShow(!isShow)}\n          >\n            {`${isShow ? 'Hide' : 'Show'} ${postComments?.length} comments`}\n          </button>\n        )}\n        {isShow && (\n          <ul className=\"PostDetails__list\">\n            {postComments && postComments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postComment={postComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { NewPostBody } from '../types/Post';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getAllPosts() {\n  try {\n    const response = await fetch(`${BASE_URL}/posts`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n}\n\nexport async function getUserPosts(userId: number) {\n  try {\n    // eslint-disable-next-line\n    const response = await fetch(`${BASE_URL}/posts${userId === 0 ? '' : '?userId=' + userId}`);\n    const data = await response.json();\n\n    if (!data) {\n      throw new Error('Dont find this user');\n    }\n\n    return data;\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n}\n\nexport async function getPostDetails(postId: number) {\n  try {\n    // eslint-disable-next-line\n    const response = await fetch(`${BASE_URL}/posts${postId && '/' + postId}`);\n    const data = await response.json();\n\n    if (!data) {\n      throw new Error('Dont find this user');\n    }\n\n    return data;\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n}\n\nexport async function getPostComments(postId: number) {\n  try {\n    // eslint-disable-next-line\n    const response = await fetch(`${BASE_URL}/comments${postId === 0 ? '' : '?postId=' + postId}`);\n    const data = await response.json();\n\n    if (!data) {\n      throw new Error('Dont find this comments');\n    }\n\n    return data;\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n}\n\nexport async function removeComment(commentId: number) {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n}\n\nexport async function postNewComment(preparedData: NewPostBody) {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(preparedData),\n  });\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport {\n  ComentsPost,\n  DetailsPost,\n  NewPostBody,\n  Post,\n} from './types/Post';\nimport {\n  getAllPosts,\n  getPostComments,\n  getPostDetails,\n  getUserPosts,\n  postNewComment,\n  removeComment,\n} from './api/api';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [error, setErorr] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [selectedPost, setSelectedPost] = useState<DetailsPost | null>(null);\n  const [postComments, setPostComments] = useState<ComentsPost[] | null>(null);\n\n  async function fetchPostList() {\n    const result = await getAllPosts();\n\n    setPosts(result);\n  }\n\n  useEffect(() => {\n    fetchPostList();\n  }, []);\n\n  async function UserSelect(e: React.ChangeEvent<HTMLSelectElement>) {\n    const result = await getUserPosts(+e.target.value);\n\n    if (result.length < 1) {\n      setPosts(null);\n      setErorr('Dont find this user');\n\n      return;\n    }\n\n    setErorr('');\n    setPosts(result);\n  }\n\n  async function fetchPostComments(PostId: number) {\n    const result = await getPostComments(PostId);\n\n    setPostComments(result);\n  }\n\n  async function fetchpostDetails(postId: number) {\n    if (postId === selectedPostId) {\n      setSelectedPost(null);\n      setSelectedPostId(0);\n\n      return;\n    }\n\n    const result = await getPostDetails(postId);\n\n    fetchPostComments(postId);\n\n    setSelectedPostId(postId);\n    setErorr('');\n    setSelectedPost(result);\n  }\n\n  async function deleteComment(commentId: number) {\n    await removeComment(commentId);\n    fetchPostComments(selectedPostId);\n  }\n\n  async function postComment(newComment: NewPostBody) {\n    const preparedData = {\n      postId: selectedPostId,\n      ...newComment,\n    };\n\n    await postNewComment(preparedData);\n    fetchPostComments(selectedPostId);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select onChange={UserSelect} className=\"App__user-selector\">\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            currentPostId={selectedPostId}\n            // eslint-disable-next-line\n            selectPostId={fetchpostDetails}\n          />\n          {error}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPost && (\n            <PostDetails\n              selectedPost={selectedPost}\n              postComments={postComments}\n              // eslint-disable-next-line\n              deleteComment={deleteComment}\n              // eslint-disable-next-line\n              postComment={postComment}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
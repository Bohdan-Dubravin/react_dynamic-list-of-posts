{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectPostId","currentPostId","className","map","post","userId","title","type","onClick","id","BASE_URL","getAllPosts","a","fetch","response","json","data","getUserPosts","Error","getPostDetails","postId","getPostComments","removeComment","commentId","method","postNewComment","preparedData","headers","body","JSON","stringify","validationEmail","NewCommentForm","postComment","formBlank","name","email","useState","newComment","setNewComment","isError","setIsError","handleChange","e","currentTarget","value","prev","onSubmit","preventDefault","Object","values","some","field","trim","match","placeholder","onChange","PostDetails","selectedPost","selectedPostId","isShow","setIsShow","postComments","setPostComments","fetchPostComments","PostId","result","useEffect","useCallback","length","comment","deleteComment","App","setPosts","error","setErorr","setSelectedPostId","setSelectedPost","target","fetchPostList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79ace7f0.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[] | null;\n  selectPostId: (postid: number) => void;\n  currentPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectPostId,\n  currentPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul data-cy=\"postDetails\" className=\"PostsList__list\">\n        {posts && posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`User #${post.userId}: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => selectPostId(post.id)}\n            >\n              {currentPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { NewPostBody } from '../types/Post';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getAllPosts() {\n  try {\n    const response = await fetch(`${BASE_URL}/posts`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n}\n\nexport async function getUserPosts(userId: number) {\n  try {\n    const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n    const data = await response.json();\n\n    if (!data) {\n      throw new Error('Dont find this user');\n    }\n\n    return data;\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n}\n\nexport async function getPostDetails(postId: number) {\n  try {\n    const response = await fetch(`${BASE_URL}/posts/${postId}`);\n    const data = await response.json();\n\n    if (!data) {\n      throw new Error('Dont find this user');\n    }\n\n    return data;\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n}\n\nexport async function getPostComments(postId: number) {\n  try {\n    // eslint-disable-next-line\n    const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n    const data = await response.json();\n\n    if (!data) {\n      throw new Error('Dont find this comments');\n    }\n\n    return data;\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n}\n\nexport async function removeComment(commentId: number) {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n}\n\nexport async function postNewComment(preparedData: NewPostBody) {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(preparedData),\n  });\n}\n","import React, { useState } from 'react';\nimport { NewPostBody } from '../../types/Post';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postComment: (preparedData: NewPostBody) => void;\n};\n// eslint-disable-next-line\nconst validationEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\nexport const NewCommentForm: React.FC<Props> = ({ postComment }) => {\n  const formBlank = {\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [newComment, setNewComment] = useState(formBlank);\n  const [isError, setIsError] = useState('');\n\n  function handleChange(e:\n  React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) {\n    const { name, value } = e.currentTarget;\n\n    setNewComment(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n\n    setIsError('');\n  }\n\n  function handleSubmit(e: React.SyntheticEvent) {\n    e.preventDefault();\n\n    const isFilled = Object.values(newComment);\n\n    if (isFilled.some(field => field.trim() === '')) {\n      setIsError('Fill in all fields');\n\n      return;\n    }\n\n    if (!newComment.email.match(validationEmail)) {\n      setIsError('Enter valid Email adress');\n\n      return;\n    }\n\n    postComment(newComment);\n\n    setNewComment(formBlank);\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"NewCommentForm\">\n      <p>{isError}</p>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newComment.body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getPostComments, postNewComment, removeComment } from '../../api/api';\nimport { ComentsPost, DetailsPost, NewPostBody } from '../../types/Post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPost: DetailsPost;\n  selectedPostId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  selectedPostId,\n}) => {\n  const [isShow, setIsShow] = useState(true);\n  const [postComments, setPostComments] = useState<ComentsPost[] | null>(null);\n\n  async function fetchPostComments(PostId: number) {\n    const result = await getPostComments(PostId);\n\n    setPostComments(result);\n  }\n\n  useEffect(() => {\n    fetchPostComments(selectedPostId);\n  }, [selectedPostId]);\n\n  async function deleteComment(commentId: number) {\n    await removeComment(commentId);\n    fetchPostComments(selectedPostId);\n  }\n\n  const postComment = useCallback(async (newComment: NewPostBody) => {\n    const preparedData = {\n      postId: selectedPostId,\n      ...newComment,\n    };\n\n    await postNewComment(preparedData);\n    fetchPostComments(selectedPostId);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.body}</p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        {postComments && postComments?.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsShow(!isShow)}\n          >\n            {`${isShow ? 'Hide' : 'Show'} ${postComments?.length} comments`}\n          </button>\n        )}\n        {isShow && (\n          <ul className=\"PostDetails__list\">\n            {postComments && postComments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postComment={postComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport {\n  DetailsPost,\n  Post,\n} from './types/Post';\nimport {\n  getAllPosts,\n  getPostDetails,\n  getUserPosts,\n\n} from './api/api';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [error, setErorr] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [selectedPost, setSelectedPost] = useState<DetailsPost | null>(null);\n\n  async function fetchPostList() {\n    const result = await getAllPosts();\n\n    setPosts(result);\n  }\n\n  useEffect(() => {\n    fetchPostList();\n  }, []);\n\n  async function UserSelect(e: React.ChangeEvent<HTMLSelectElement>) {\n    const result = await getUserPosts(+e.target.value);\n\n    if (result.length < 1) {\n      setPosts(null);\n      setErorr('Dont find this user');\n\n      return;\n    }\n\n    setErorr('');\n    setPosts(result);\n  }\n\n  async function fetchpostDetails(postId: number) {\n    if (postId === selectedPostId) {\n      setSelectedPost(null);\n      setSelectedPostId(0);\n\n      return;\n    }\n\n    const result = await getPostDetails(postId);\n\n    setSelectedPostId(postId);\n    setErorr('');\n    setSelectedPost(result);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select onChange={UserSelect} className=\"App__user-selector\">\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            currentPostId={selectedPostId}\n            // eslint-disable-next-line\n            selectPostId={fetchpostDetails}\n          />\n          <p>{error}</p>\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPost && (\n            <PostDetails\n              selectedPost={selectedPost}\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}